package allthatbook.mvc.view;

import java.util.List;
import java.util.Scanner;
import allthatbook.mvc.controller.BookController;
import allthatbook.mvc.controller.UpdateAdminController;
import allthatbook.mvc.controller.UserController;
import allthatbook.mvc.model.dto.Book;
import allthatbook.mvc.model.dto.User;


public class AdminMenuView {
	private static Scanner sc = new Scanner(System.in);
	
	/**
	 * 관리자메뉴
	 */
	public static void printAdminMenu(User user) {
		while(true) {
			try {

				System.out.println("                         관리자 메뉴                         ");
				System.out.println("\n");
				System.out.println("    1. 회원관리           2. 도서관리           9. 로그아웃     ");
				System.out.println("---------------------------------------------------------------------");
				
				int menu = Integer.parseInt(sc.nextLine());
				switch (menu) {
				case 1:
					AdminMenuView.userAdminMenu();
					break;
				case 2:
					AdminMenuView.bookAdminMenu(user);
					break;
				case 3:
					break;
				case 9:
					UserMenuView.logout(user.getUserId());
					return;
				default:
					System.out.println("메뉴에 있는 '번호'를 입력해주세요. ");
				}
			} catch (NumberFormatException e) {
				FailView.errorMessage("메뉴는 '숫자'만 입력가능합니다. ");
			}

		}
	}
	
	/**
	 * 회원관리 메뉴
	 * @throws Exception 
	 */
	public static void userAdminMenu() {
		while(true) {
			try {	
				System.out.println("                               관리자 회원 관리                                       ");
				System.out.println("1. 전체회원 조회  2. 회원번호로 조회  3. 회원ID로 조회   4.회원정보수정   5.회원정보삭제    9. 돌아가기  ");
				System.out.println("------------------------------------------------------------------------------------------------");

				int menu=Integer.parseInt(sc.nextLine());
				int result=0;
				int userNo;
				User user;
				switch(menu) {
				case 1 :
					UserController.userSelect();
					break;
				case 2 : 
					userNo=InputUserNo();
					UserController.selectByUserNo(userNo);
					break;
				case 3 :
					String userId=InputUserId();
					UserController.selectByUserId(userId);
					break;
				case 4 : //회원정보수정 
					userNo = InputUserNo();
					user = UserController.selectByUserNo(userNo);
					if(user==null) {
						break;
					}
					User updateuser = updateUser();
					result = UpdateAdminController.userUpdate(userNo, updateuser);
					if(result==1)System.out.println(userNo+"번 회원이 수정되었습니다. ");
					break;
				case 5 : 
					userNo = InputUserNo();
					user = UserController.selectByUserNo(userNo);
					if(user==null) {
						break;
					}
					UserController.deleteAdminUserInfo(userNo);
					break;
				case 9 :  			
					return;
				default : 
					System.out.println("메뉴에 있는 '번호'만 입력해주세요. ");
				}
			} catch (NumberFormatException e) {
				FailView.errorMessage("메뉴는 '숫자'만 입력가능합니다. ");
			}
		}
		
	}

	/**
	 * 도서관리 메뉴
	 */
	public static void bookAdminMenu(User user) {
		while(true) {
			try {
				System.out.println("                                        관리자 도서 관리                                            ");
				System.out.println("1. 새 도서등록          2. 도서정보수정          3. 도서삭제           4. 도서조회            9. 나가기    ");
				System.out.println("------------------------------------------------------------------------------------------------------------");

				int menu=Integer.parseInt(sc.nextLine());
				int bookNo=0;
				int result=0;
				Book book=null;
				switch(menu) {
					case 1 :
						book=InputBook();
						BookController.bookInsert(book);


						break;
					case 2 : //도서정보수정
						bookNo = InputBookNo();
						book = BookController.bookSelectByBookNo(user, bookNo);
						if(book==null) {
							break;
						}
						Book updatebook = updateBook();
						result = UpdateAdminController.bookUpdate(bookNo, updatebook);
						if(result==1)System.out.println(bookNo+"번 해당 도서가 수정되었습니다. ");
						break;
					case 3 : 
						bookNo = InputBookNo();
						BookController.bookDelete(bookNo);	
						break;
					case 4 : 
						printSelectMenu(user);
						break;
					case 9 :
						return;
					default:
						System.out.println("메뉴에 있는 '번호'만 입력해주세요. ");
				}
				
			} catch (NumberFormatException e) {
				FailView.errorMessage("메뉴는 '숫자'만 입력가능합니다. ");
			}
		}
	}	
	
	/**
	 * 관리자 도서 검색 메뉴
	 */
	public static void printSelectMenu(User user) {
		while(true) {
			System.out.println("\n");
			System.out.println("1. 도서번호로 검색    2. 도서명으로 검색    3. 저자명으로 검색    4. 출판사로 검색     5. 도서분야로 검색     6. 대여여부로 검색    9. 돌아가기    ");
			System.out.println("-----------------------------------------------------------------------------------------------------------------------");
			System.out.print("원하시는 서비스의 번호를 입력해주세요 :  ");
			int menu =Integer.parseInt(sc.nextLine());
			switch(menu) {
			case 1 :
				Book book =  BookMenuView.selectBookByNo(user); //도서번호로 검색
				return;
			case 2 :
				List<Book> bookListByName = BookMenuView.selectBookByName(user); //도서명으로 검색
				return;
			case 3 :
				List<Book> bookListByWriter = BookMenuView.selectBookByWriter(user); //저자명으로 검색
				return;
			case 4 :
				List<Book> bookListByPublisher = BookMenuView.selectBookByPublisher(user); //출판사로 검색
				return;
			case 5 :
				List<Book> bookListByCateory = BookMenuView.selectBookByCategory(user); //분야로 검색
				return;
			case 6 : 
				List<Book> bookListByState = BookMenuView.selectBookByState(user); //대여 여부로 검색(0: 대여가능, 1: 대여중, 2: 예약중)
				return;
			case 9 :
				return;
			}
		}
	}

	/**
	 * UserNo 입력받기 
	 */

	public static int InputUserNo(){
		int userNo=0;
		try {
			System.out.print("userNo 입력 :  ");
			userNo = Integer.parseInt(sc.nextLine());
		} catch (Exception e) {
			
		}finally {
			return userNo;
		}
	}

	/**
	 * UserId 입력받기 
	 */
	public static String InputUserId() {
		System.out.print("UserId 입력 : ");
		String userId = sc.nextLine();
		return userId;
	}

	/**
	 *	bookInsert에 필요한 book정보 넣기 
	 */	
	public static Book InputBook() {
		Book book = null;
		while(true) {
	        System.out.println("도서번호는 자동배정됩니다.");
	        
	        System.out.print("도서이름 입력 : ");
	        String bookName = sc.nextLine();
	        if(bookName.equals("")) {
	        	System.out.println("도서이름의 입력은 필수입니다. ");
	        	continue;
	        }
	        System.out.print("저자명 입력 : ");
	        String bookWriter = sc.nextLine();
	        System.out.print("출판사 입력 : ");
	        String bookPublisher = sc.nextLine();
	        System.out.print("도서분야 입력 : ");
	        String bookField = sc.nextLine();
	        System.out.println("도서대여는 기본 대출가능 '0' 으로 들어갑니다.");
	        if(bookName.equals("")||bookWriter.equals("")||bookPublisher.equals("")||bookField.equals("")) {
	              System.out.println("<도서이름, 저자명, 출판사, 도서분야는 입력 필수>");
	              continue;
	           }
	        book = new Book(0, bookName, bookWriter, bookPublisher, bookField, 0);
	        break;
		}


		return book;
	}

	
	/**
	 * bookNo입력받기 
	 */
	public static int InputBookNo() {

		int bookNo=0;
		try {
			System.out.print("도서번호 입력  : ");
			bookNo = Integer.parseInt(sc.nextLine());
		} catch (Exception e) {
			
		}finally {
			return bookNo;
		}	
	}
	
	/**
	 * User 수정할 데이터 입력받기 
	 */
	private static User updateUser() {
		User updateUser = new User();
		System.out.println("수정할 UserID 입력 (수정을 원하지 않을 시 ENTER 을 눌러주세요) : ");
		updateUser.setUserId(sc.nextLine());
		System.out.println("수정할 UserPASSWORD 입력 (수정을 원하지 않을 시 ENTER 을 눌러주세요) : ");
		updateUser.setUserPwd(sc.nextLine());
		System.out.println("수정할 UserNAME 입력 (수정을 원하지 않을 시 ENTER 을 눌러주세요) : ");
		updateUser.setUserName(sc.nextLine());
		System.out.println("수정할 UserPHONE 입력 (수정을 원하지 않을 시 ENTER 을 눌러주세요) : ");
		updateUser.setUserPhone(sc.nextLine()); 

		return updateUser;
	}
	
	/**
	 * book수정할 데이터 입력받기 
	 */
	public static Book updateBook() {
		Book updateBook = new Book();		
		System.out.print("수정할 도서이름 입력 (수정을 원하지 않을 시 ENTER 을 눌러주세요) : ");
		updateBook.setBookName(sc.nextLine());
		System.out.print("수정할 저자명 입력 (수정을 원하지 않을 시 ENTER 을 눌러주세요) : ");
		updateBook.setBookWriter(sc.nextLine());
		System.out.print("수정할 출판사 입력 (수정을 원하지 않을 시 ENTER 을 눌러주세요) : ");
		updateBook.setBookPublisher(sc.nextLine());
		System.out.print("수정할 도서분야 입력 (수정을 원하지 않을 시 ENTER 을 눌러주세요) : ");
		updateBook.setBookField(sc.nextLine());
		
		return updateBook;
	}
	

}
